#!/bin/bash

if [ $(basename "$0") == "pharo" ]; then
    PHARO=1
    VM_PATH="pharo"
    IMAGE_GLOB="Pharo*.image"
else
    VM_PATH="squeak"
    IMAGE_GLOB="Squeak*.image"
fi

SQUEAK_SERVER="http://ftp.squeak.org"
SOURCE_FOLDER="sources_files"
SQUEAK_WILDCARD="4."

function run {
    if [[ "$1" == "oldvm" ]]; then
	version="squeakvm"
	image_arg="$2"
	args=${@:2}
	echo "Using old VM"
	echo "Remaining arguments are $args"
    else if [[ "$1" == "x86_64" ]]; then
	version="squeakvm64bit"
	image_arg="$2"
	args=${@:2}
	echo "Using 64bit VM"
	echo "Remaining arguments are $args"
    else
	version="cog"
	image_arg="$1"
	args=$@
    fi fi
    BIN=`/usr/bin/dirname "$0"`/lib/$VM_PATH/$version
    if [[ -e "$image_arg" ]]; then
	if [[ -n $(echo "$image_arg" | grep "\.image$") ]]; then
            IMAGE="$image_arg" # If the file exists and ends with image, use it
	fi
    fi
    if [[ -e "${image_arg}.image" ]]; then
	IMAGE="${image_arg}.image" # If an image file with that prefix exists, use it
    fi

   # At least on linux LD_LIBRARY_PATH's components must be absolute path names
    case "$BIN" in
	/*) PLUGINS="$BIN";;
	*) PLUGINS="`pwd`/$BIN"
    esac
   # prepending is less flexible but safer because it ensures we find the plugins
   # in the same directory as the VM.
    if [[ -n $IMAGE ]]; then
	LD_LIBRARY_PATH=$PLUGINS${LD_LIBRARY_PATH:+:$LD_LIBRARY_PATH} exec "$BIN/squeak" $args
    else
	LD_LIBRARY_PATH=$PLUGINS${LD_LIBRARY_PATH:+:$LD_LIBRARY_PATH} exec "$BIN/squeak" "$(ls $IMAGE_GLOB | head -1)" $args
    fi
}

function download_squeak {
    if [[ -z $(ls | grep "Squeak[^\.]*\.sources") ]]; then
	declare -a IMAGES
	declare -a IMAGE_FOLDERS
	idx=1
	for i in $(curl -s $SQUEAK_SERVER | grep DIR | grep -o "href=\".*\"" | grep "$SQUEAK_WILDCARD"); do
	    i=${i#*=}
	    i=${i#\"}
	    i=${i%%\"}
	    for j in $(curl -s $SQUEAK_SERVER/$i/ | grep -o "href=\"Squeak.*zip\""); do
		j=${j#*=}
		j=${j#\"}
		j=${j%%\"}
		IMAGE_FOLDERS[idx]=$i
		IMAGES[idx]=$j
		idx=$[idx + 1]
	    done
	done

	for i in `seq 1 $[idx - 1]`; do echo "[$i] ${IMAGES[i]}"; done
	printf "Choose: "
	read idx
	echo "Chosen $SQUEAK_SERVER/${IMAGE_FOLDERS[idx]}${IMAGES[idx]}"
	curl -O "$SQUEAK_SERVER/${IMAGE_FOLDERS[idx]}${IMAGES[idx]}"
	unzip ${IMAGES[idx]}
	rm ${IMAGES[idx]}
	# Pull Squeak out of subdirectory
	if [[ -z $(ls | grep Squeak.*image) ]]; then
            possible_squeak_dir="$(ls --group-directories-first | grep -m1 Squeak)"
            if [[ -d $possible_squeak_dir ]]; then
		mv "$possible_squeak_dir"/* .
		rmdir "$possible_squeak_dir"
            fi
	fi

	idx=1
	declare -a SOURCES
	for j in $(curl -s $SQUEAK_SERVER/$SOURCE_FOLDER/ | grep -o "href=\".*gz\""); do
	    j=${j#*=}
	    j=${j#\"}
	    j=${j%%\"}
	    SOURCES[idx]=$j
	    idx=$[idx + 1]
	done

	for i in `seq 1 $[idx - 1]`; do echo "[$i] ${SOURCES[i]}"; done
	printf "Choose Sources: "
	read idx
	curl -O "$SQUEAK_SERVER/$SOURCE_FOLDER/${SOURCES[idx]}"
	gunzip ${SOURCES[idx]}
    fi
}

function download_pharo {
    VERSION="1.4"
    wget -c "https://ci.lille.inria.fr/pharo/job/Pharo%20${VERSION}/lastSuccessfulBuild/artifact/Pharo-${VERSION}.zip"
    unzip Pharo*.zip
    rm Pharo*.zip
    mv Pharo*/* .
    rmdir Pharo*
}

function update {
    echo "Updating to Trunk..."
    update_file="__squeak_update.st"
    cat <<EOF> $update_file
   Installer ss3
   	 project: 'timfelgentreff';
   	 install: 'ConfigurationOfTimFelgentreff'.
   (Smalltalk at: #ConfigurationOfTimFelgentreff) install.
   SystemWindow subclasses collect: [:k | k allInstances] thenDo: [:iary | iary do: [:each | each delete]].
   SmalltalkImage current snapshot: true andQuit: false.
   Smalltalk processHasThreadIdInstVar: true.
EOF
    run oldvm $update_file
    rm $update_file
}

function update_to_trunk {
    update_file="__squeak_update.st"
    cat <<EOF> $update_file
   MCMcmUpdater updateFromDefaultRepository.
   SmalltalkImage current snapshot: true andQuit: true.
EOF
    run oldvm $update_file
    rm $update_file
}

if [ "$1" == "download" ]; then
    if [ -z $PHARO ]; then
	download_squeak
	if [ "$2" == "trunk" ]; then
	    update_to_trunk
	fi
	update
    else
	download_pharo
    fi
else
    run $@
fi
